@page "/boards/create"
@using BoardApp.WebApp.Models
@using BoardApp.WebApp.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IBoardService BoardService
@inject ICategoryService CategoryService
@inject IFileUploadService FileUploadService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@rendermode InteractiveServer

<PageTitle>글쓰기</PageTitle>

<MudStack Spacing="4">
    <!-- Header -->
    <div>
        <MudText Typo="Typo.h3" Style="font-weight: 700; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent;">
            새 글 작성
        </MudText>
        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-1">
            공유하고 싶은 이야기를 자유롭게 작성해보세요
        </MudText>
    </div>

    <MudPaper Elevation="0" Class="pa-6" Style="border-radius: 12px; border: 1px solid #e0e0e0;">
        <EditForm Model="@board" OnValidSubmit="HandleValidSubmit" @ref="editForm">
            <DataAnnotationsValidator />
            <MudStack Spacing="4">
                <!-- Title & Author -->
                <MudStack Spacing="3">
                    <div>
                        <MudText Typo="Typo.subtitle1" Style="font-weight: 600; margin-bottom: 8px;">
                            <MudIcon Icon="@Icons.Material.Filled.Title" Size="Size.Small" Class="mr-1" /> 제목
                        </MudText>
                        <MudTextField @bind-Value="board.Title"
                                      For="@(() => board.Title)"
                                      Variant="Variant.Outlined"
                                      Placeholder="제목을 입력하세요"
                                      Style="border-radius: 8px;" />
                    </div>

                    <div>
                        <MudText Typo="Typo.subtitle1" Style="font-weight: 600; margin-bottom: 8px;">
                            <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Small" Class="mr-1" /> 카테고리
                        </MudText>
                        @if (categories == null)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                        }
                        else
                        {
                            <MudSelect T="int"
                                       @bind-Value="board.CategoryId"
                                       For="@(() => board.CategoryId)"
                                       Variant="Variant.Outlined"
                                       Placeholder="카테고리를 선택하세요"
                                       Style="border-radius: 8px;">
                                @foreach (var category in categories.OrderBy(c => c.DisplayOrder))
                                {
                                    <MudSelectItem Value="@category.Id">
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                            @if (category.IsPinned)
                                            {
                                                <MudIcon Icon="@Icons.Material.Filled.PushPin" Size="Size.Small" Color="Color.Warning" />
                                            }
                                            <MudChip T="string" Text="@category.Name" Color="Color.Primary" Size="Size.Small" Style="@($"background-color: {category.Color}; color: white;")" />
                                            @if (!string.IsNullOrEmpty(category.Description))
                                            {
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">- @category.Description</MudText>
                                            }
                                        </MudStack>
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        }
                    </div>
                </MudStack>

                <!-- Content Editor -->
                <div>
                    <MudText Typo="Typo.subtitle1" Style="font-weight: 600; margin-bottom: 8px;">
                        <MudIcon Icon="@Icons.Material.Filled.Description" Size="Size.Small" Class="mr-1" /> 내용
                    </MudText>
                    <MudPaper Elevation="0" Height="300px" Style="border: 1px solid #e0e0e0; border-radius: 8px; overflow: hidden;">
                        <BlazoredTextEditor @ref="quillEditor" Syntax="true" Placeholder="내용을 입력하세요...">
                            <ToolbarContent >
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                    <button class="ql-indent" value="-1"></button>
                                    <button class="ql-indent" value="+1"></button>                    
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-align"></select>
                                </span>                
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                    <button class="ql-image"></button>
                                    <button class="ql-video"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-blockquote"></button>
                                    <button class="ql-code-block"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-clean"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>
                            </EditorContent>
                        </BlazoredTextEditor>
                    </MudPaper>
                </div>

                <!-- File Upload -->
                <div>
                    <MudText Typo="Typo.subtitle1" Style="font-weight: 600; margin-bottom: 8px;">
                        <MudIcon Icon="@Icons.Material.Filled.AttachFile" Size="Size.Small" Class="mr-1" /> 파일 첨부
                    </MudText>
                    <MudPaper Elevation="0" Class="pa-4" Style="border: 2px dashed #e0e0e0; border-radius: 8px; text-align: center;">
                        <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                                       @bind-Files="selectedFiles"
                                       MaximumFileCount="10"
                                       Accept="image/*,video/*,.pdf,.doc,.docx,.xls,.xlsx,.zip">
                            <ActivatorContent>
                                <MudStack AlignItems="AlignItems.Center" Spacing="2">
                                    <MudIcon Icon="@Icons.Material.Filled.CloudUpload" Size="Size.Large" Color="Color.Primary" />
                                    <MudButton Variant="Variant.Outlined"
                                               Color="Color.Primary"
                                               StartIcon="@Icons.Material.Filled.AttachFile"
                                               Style="border-radius: 8px;">
                                        파일 선택
                                    </MudButton>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">최대 10MB, 최대 10개</MudText>
                                </MudStack>
                            </ActivatorContent>
                        </MudFileUpload>
                    </MudPaper>

                    @if (selectedFiles != null && selectedFiles.Any())
                    {
                        <MudPaper Elevation="0" Class="pa-3 mt-3" Style="background: #f8f9fa; border-radius: 8px;">
                            <MudText Typo="Typo.subtitle2" Style="font-weight: 600; margin-bottom: 12px;">선택된 파일 (@selectedFiles.Count)</MudText>
                            <MudStack Spacing="1">
                                @foreach (var file in selectedFiles)
                                {
                                    <MudPaper Elevation="0" Class="pa-2" Style="background: white; border-radius: 6px; border: 1px solid #e0e0e0;">
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                            <MudIcon Icon="@Icons.Material.Filled.InsertDriveFile" Color="Color.Primary" Size="Size.Small" />
                                            <div style="flex: 1;">
                                                <MudText Typo="Typo.body2" Style="font-weight: 500;">@file.Name</MudText>
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">@string.Format("{0:F2} MB", file.Size / 1024.0 / 1024.0)</MudText>
                                            </div>
                                        </MudStack>
                                    </MudPaper>
                                }
                            </MudStack>
                        </MudPaper>
                    }
                </div>

                <!-- Action Buttons -->
                <MudStack Row="true" Spacing="2" Justify="Justify.Center" Class="mt-2">
                    <MudButton OnClick="HandleSaveClick"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Large"
                               StartIcon="@Icons.Material.Filled.Send"
                               Style="border-radius: 12px; padding: 12px 32px; box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);">
                        게시글 등록
                    </MudButton>
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Secondary"
                               Size="Size.Large"
                               StartIcon="@Icons.Material.Filled.Cancel"
                               Style="border-radius: 12px; padding: 12px 32px;"
                               OnClick="@(() => NavigationManager.NavigateTo("/boards"))">
                        취소
                    </MudButton>
                </MudStack>
            </MudStack>
        </EditForm>
    </MudPaper>
</MudStack>

@code {
    private Board board = new Board();
    private List<Category>? categories;
    private IReadOnlyList<IBrowserFile>? selectedFiles;
    private BlazoredTextEditor? quillEditor;
    private EditForm? editForm;
    private ApplicationUser? currentUser;

    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetActiveCategoriesAsync();

        // 현재 로그인한 사용자 정보 가져오기
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            currentUser = await UserManager.GetUserAsync(user);
        }
    }

    private async Task HandleSaveClick()
    {
        try
        {
            // 먼저 에디터에서 HTML 내용 가져오기
            if (quillEditor != null)
            {
                board.Content = await quillEditor.GetHTML();
            }

            // Content가 비어있는지 확인
            if (string.IsNullOrWhiteSpace(board.Content) || board.Content == "<p><br></p>")
            {
                Snackbar.Add("내용을 입력해주세요.", Severity.Warning);
                return;
            }

            // 현재 사용자 정보 설정 (검증 전에 설정해야 함)
            if (currentUser != null)
            {
                board.Author = currentUser.DisplayName ?? currentUser.Email ?? "익명";
                board.AuthorId = currentUser.Id;
            }
            else
            {
                board.Author = "익명";
            }

            // 폼 검증 (제목, 작성자 등)
            var editContext = editForm?.EditContext;
            if (editContext != null && !editContext.Validate())
            {
                Snackbar.Add("필수 항목을 입력해주세요.", Severity.Warning);
                return;
            }

            // 게시글 저장
            var createdBoard = await BoardService.CreateBoardAsync(board);

            // 파일 업로드
            if (selectedFiles != null && selectedFiles.Any())
            {
                await FileUploadService.UploadFilesAsync(selectedFiles, createdBoard.Id);
            }

            Snackbar.Add("게시글이 등록되었습니다.", Severity.Success);
            NavigationManager.NavigateTo("/boards");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"오류가 발생했습니다: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleValidSubmit()
    {
        await HandleSaveClick();
    }
}
