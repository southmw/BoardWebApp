@page "/boards/edit/{id:int}"
@using BoardApp.WebApp.Models
@using BoardApp.WebApp.Services
@using Microsoft.AspNetCore.Components
@attribute [Authorize]
@inject IBoardService BoardService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<PageTitle>게시글 수정</PageTitle>

@if (board == null)
{
    <MudStack AlignItems="AlignItems.Center" Class="py-8">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        <MudText Typo="Typo.body1" Class="mt-4">게시글을 불러오는 중...</MudText>
    </MudStack>
}
else
{
    <MudStack Spacing="4">
        <!-- Header -->
        <div>
            <MudText Typo="Typo.h3" Style="font-weight: 700; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); -webkit-background-clip: text; -webkit-text-fill-color: transparent;">
                게시글 수정
            </MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-1">
                작성한 내용을 수정할 수 있습니다
            </MudText>
        </div>

        <MudPaper Elevation="0" Class="pa-6" Style="border-radius: 12px; border: 1px solid #e0e0e0;">
            <EditForm Model="@board" OnValidSubmit="HandleValidSubmit" @ref="editForm">
                <DataAnnotationsValidator />
                <MudStack Spacing="4">
                    <!-- Title & Author -->
                    <MudStack Spacing="3">
                        <div>
                            <MudText Typo="Typo.subtitle1" Style="font-weight: 600; margin-bottom: 8px;">
                                <MudIcon Icon="@Icons.Material.Filled.Title" Size="Size.Small" Class="mr-1" /> 제목
                            </MudText>
                            <MudTextField @bind-Value="board.Title"
                                          For="@(() => board.Title)"
                                          Variant="Variant.Outlined"
                                          Placeholder="제목을 입력하세요"
                                          Style="border-radius: 8px;" />
                        </div>

                        <div>
                            <MudText Typo="Typo.subtitle1" Style="font-weight: 600; margin-bottom: 8px;">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" Class="mr-1" /> 작성자
                            </MudText>
                            <MudTextField @bind-Value="board.Author"
                                          For="@(() => board.Author)"
                                          Variant="Variant.Outlined"
                                          Placeholder="작성자명을 입력하세요"
                                          Style="border-radius: 8px;" />
                        </div>

                        <div>
                            <MudText Typo="Typo.subtitle1" Style="font-weight: 600; margin-bottom: 8px;">
                                <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Small" Class="mr-1" /> 카테고리
                            </MudText>
                            @if (categories == null)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                            }
                            else
                            {
                                <MudSelect T="int"
                                           @bind-Value="board.CategoryId"
                                           For="@(() => board.CategoryId)"
                                           Variant="Variant.Outlined"
                                           Placeholder="카테고리를 선택하세요"
                                           Style="border-radius: 8px;">
                                    @foreach (var category in categories.OrderBy(c => c.DisplayOrder))
                                    {
                                        <MudSelectItem Value="@category.Id">
                                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                                @if (category.IsPinned)
                                                {
                                                    <MudIcon Icon="@Icons.Material.Filled.PushPin" Size="Size.Small" Color="Color.Warning" />
                                                }
                                                <MudChip T="string" Text="@category.Name" Color="Color.Primary" Size="Size.Small" Style="@($"background-color: {category.Color}; color: white;")" />
                                                @if (!string.IsNullOrEmpty(category.Description))
                                                {
                                                    <MudText Typo="Typo.caption" Color="Color.Secondary">- @category.Description</MudText>
                                                }
                                            </MudStack>
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            }
                        </div>
                    </MudStack>

                    <!-- Content Editor -->
                    <div>
                        <MudText Typo="Typo.subtitle1" Style="font-weight: 600; margin-bottom: 8px;">
                            <MudIcon Icon="@Icons.Material.Filled.Description" Size="Size.Small" Class="mr-1" /> 내용
                        </MudText>
                        <MudPaper Elevation="0" Style="border: 1px solid #e0e0e0; border-radius: 8px; overflow: hidden;">
                            <BlazoredTextEditor @ref="quillEditor" Placeholder="내용을 입력하세요...">
                <ToolbarContent>
                <select class="ql-header">
                    <option selected=""></option>
                    <option value="1"></option>
                    <option value="2"></option>
                    <option value="3"></option>
                    <option value="4"></option>
                    <option value="5"></option>
                </select>
                <span class="ql-formats">
                    <button class="ql-bold"></button>
                    <button class="ql-italic"></button>
                    <button class="ql-underline"></button>
                    <button class="ql-strike"></button>
                </span>
                <span class="ql-formats">
                    <select class="ql-color"></select>
                    <select class="ql-background"></select>
                </span>
                <span class="ql-formats">
                    <button class="ql-list" value="ordered"></button>
                    <button class="ql-list" value="bullet"></button>
                    <button class="ql-indent" value="-1"></button>
                    <button class="ql-indent" value="+1"></button>                    
                </span>
                <span class="ql-formats">
                    <select class="ql-align"></select>
                </span>                
                <span class="ql-formats">
                    <button class="ql-link"></button>
                    <button class="ql-image"></button>
                    <button class="ql-video"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-blockquote"></button>
                </span>
                <span class="ql-formats">
                    <button class="ql-clean"></button>
                </span>
                </ToolbarContent>
                <EditorContent>
                    @if (board != null && !string.IsNullOrEmpty(board.Content))
                    {
                        @((MarkupString)board.Content)
                    }
                </EditorContent>
                            </BlazoredTextEditor>
                        </MudPaper>
                    </div>

                    <!-- Action Buttons -->
                    <MudStack Row="true" Spacing="2" Justify="Justify.Center" Class="mt-2">
                        <MudButton OnClick="HandleSaveClick"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Size="Size.Large"
                                   StartIcon="@Icons.Material.Filled.Save"
                                   Style="border-radius: 12px; padding: 12px 32px; box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);">
                            저장
                        </MudButton>
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Secondary"
                                   Size="Size.Large"
                                   StartIcon="@Icons.Material.Filled.Cancel"
                                   Style="border-radius: 12px; padding: 12px 32px;"
                                   OnClick="@(() => NavigationManager.NavigateTo($"/boards/{Id}"))">
                            취소
                        </MudButton>
                    </MudStack>
                </MudStack>
            </EditForm>
        </MudPaper>
    </MudStack>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Board? board;
    private List<Category>? categories;
    private BlazoredTextEditor? quillEditor;
    private EditForm? editForm;

    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetActiveCategoriesAsync();
        board = await BoardService.GetBoardByIdAsync(Id);
        if (board == null)
        {
            NavigationManager.NavigateTo("/boards");
        }
    }

    private async Task HandleSaveClick()
    {
        if (board == null) return;

        try
        {
            // 먼저 에디터에서 HTML 내용 가져오기
            if (quillEditor != null)
            {
                board.Content = await quillEditor.GetHTML();
            }

            // Content가 비어있는지 확인
            if (string.IsNullOrWhiteSpace(board.Content) || board.Content == "<p><br></p>")
            {
                Snackbar.Add("내용을 입력해주세요.", Severity.Warning);
                return;
            }

            // 폼 검증 (제목, 작성자 등)
            var editContext = editForm?.EditContext;
            if (editContext != null && !editContext.Validate())
            {
                Snackbar.Add("필수 항목을 입력해주세요.", Severity.Warning);
                return;
            }

            await BoardService.UpdateBoardAsync(Id, board);
            Snackbar.Add("게시글이 수정되었습니다.", Severity.Success);

            // StateHasChanged를 호출하여 UI 업데이트를 보장하고
            // forceLoad를 true로 설정하여 강제 새로고침
            StateHasChanged();
            NavigationManager.NavigateTo($"/boards/{Id}", forceLoad: true);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"오류가 발생했습니다: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleValidSubmit()
    {
        await HandleSaveClick();
    }
}
